-VARIABLES-

int i = 0


-CONST-
int: fixed i = 0
i = 4 // error




-REF-
int: fixed x = 44
int: ref i = x

print(i) // error
print(#i) //! dereference op: #








-KEYWORDS-
null
nullref
default

class myClass{
	default(){
		return new myClass(0, 5, "className")
	}
	//declares a static function
	void:static myStaticFunction(int:ref myintref){
		myintref += 5
		
	}

}
int __func()
{
	myClass m = default //sets refint to a default value provided by the type
	m = null

	m.doSomething() //is null, but will only cause warning, function will not be called
	m = nullref //will throw error, a variable that is not a refrence cannot be nullref

}


--if statements--

#1 = if(condition<bool>)

#2 = if(value<type> (operator) value<type>)

#3 = if(?value) //checks if the value is not null

#4 = if(^ (and | or) ^ )// ^ = any above

--approaching if statements--

VContainer left;
Operator op = null;
VContainer right = null;

finds 'if' -> 
	left = () => {
		finds '(' -> return VContainer of everything parsed before comparison operator
		else ERR
	} ->
	finds LOGICALOP -> 
		op = () => {-> parse and return Operator } ->
		right = () => {return VContainer of everything parsed after comparison op and before last ')'} ->
		skip to token after '{' ->
		BREAK
	else: 
		return bool expr #1 then END


	CREATE BoolExpr obj(left, op, right)

	call BoolExpr.evaluate()

	parse result, if true:
		continue parse
	else:
		skip to end of '}' and return
